<!DOCTYPE html>
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bilgisayar YÃ¶netimi - Modern Filtreleme</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #206bc4;
            --success-color: #28a745;
            --warning-color: #fd7e14;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
            --secondary-color: #6c757d;
            --light-bg: #f8f9fa;
            --border-color: #dee2e6;
            --border-radius: 0.5rem;
            --box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            --transition: all 0.2s ease-in-out;
        }

        body {
            background-color: var(--light-bg);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .page-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        /* Modern Filter Bar */
        .filter-bar {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 1rem;
            margin-bottom: 1.5rem;
            border: 1px solid var(--border-color);
        }

        .filter-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .search-input-group {
            flex: 1;
            min-width: 250px;
            position: relative;
        }

        .search-input {
            border-radius: 50px;
            padding: 0.5rem 1rem 0.5rem 2.5rem;
            border: 2px solid var(--border-color);
            transition: var(--transition);
            background: white;
        }

        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(32, 107, 196, 0.15);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--secondary-color);
            z-index: 5;
        }

        .clear-search {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: var(--secondary-color);
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 50%;
            transition: var(--transition);
            z-index: 5;
        }

        .clear-search:hover {
            background: var(--light-bg);
            color: var(--danger-color);
        }

        .filter-dropdown {
            position: relative;
        }

        .filter-btn {
            background: white;
            border: 2px solid var(--border-color);
            border-radius: var(--border-radius);
            padding: 0.5rem 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 500;
            white-space: nowrap;
        }

        .filter-btn:hover,
        .filter-btn.active {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        .filter-btn.has-filters {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .filter-dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            z-index: 1000;
            min-width: 200px;
            padding: 0.5rem;
            display: none;
        }

        .filter-dropdown-menu.show {
            display: block;
        }

        .filter-option {
            display: flex;
            align-items: center;
            padding: 0.5rem;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .filter-option:hover {
            background: var(--light-bg);
        }

        .filter-option.active {
            background: var(--primary-color);
            color: white;
        }

        .filter-badge {
            background: var(--primary-color);
            color: white;
            border-radius: 50px;
            padding: 0.25rem 0.75rem;
            font-size: 0.875rem;
            margin-left: 0.5rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .filter-badge .remove {
            cursor: pointer;
            opacity: 0.8;
        }

        .filter-badge .remove:hover {
            opacity: 1;
        }

        .active-filters {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-top: 0.5rem;
        }

        .quick-actions {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .view-toggle {
            background: white;
            border: 2px solid var(--border-color);
            border-radius: var(--border-radius);
            padding: 0.25rem;
            display: flex;
        }

        .view-toggle button {
            background: none;
            border: none;
            padding: 0.5rem;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: var(--transition);
            color: var(--secondary-color);
        }

        .view-toggle button.active {
            background: var(--primary-color);
            color: white;
        }

        /* Results Header */
        .results-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .results-info {
            color: var(--secondary-color);
            font-size: 0.9rem;
        }

        .results-info strong {
            color: var(--primary-color);
        }

        /* Statistics Cards - More Compact */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-card {
            background: white;
            border-radius: var(--border-radius);
            padding: 1rem;
            border: 1px solid var(--border-color);
            transition: var(--transition);
            cursor: pointer;
        }

        .stat-card:hover {
            box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .stat-card.active {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(32, 107, 196, 0.15);
        }

        .stat-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .stat-icon {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            flex-shrink: 0;
        }

        .stat-icon.total {
            background: var(--primary-color);
        }

        .stat-icon.active {
            background: var(--success-color);
        }

        .stat-icon.maintenance {
            background: var(--warning-color);
        }

        .stat-icon.broken {
            background: var(--danger-color);
        }

        .stat-details h3 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
        }

        .stat-details p {
            margin: 0;
            color: var(--secondary-color);
            font-size: 0.875rem;
        }

        /* Mobile Responsive */
        @@media (max-width: 768px) {
            .filter-controls {
                flex-direction: column;
                align-items: stretch;
            }

            .search-input-group {
                min-width: 100%;
            }

            .quick-actions {
                justify-content: space-between;
                width: 100%;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 0.75rem;
            }

            .stat-content {
                flex-direction: column;
                text-align: center;
                gap: 0.5rem;
            }

            .filter-dropdown-menu {
                left: 0;
                right: 0;
                width: auto;
            }
        }

        @@media (max-width: 480px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }

            .page-container {
                padding: 1rem 0.5rem;
            }
        }

        /* Animation */
        .fade-in {
            animation: fadeIn 0.3s ease-in-out;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Tooltip */
        .tooltip-custom {
            position: relative;
            cursor: help;
        }

        .tooltip-custom::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s;
            z-index: 1000;
        }

        .tooltip-custom:hover::after {
            opacity: 1;
        }

        /* Loading state */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .spinner {
            width: 1rem;
            height: 1rem;
            border: 2px solid var(--border-color);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }
    </style>
</head>

<body>
    <div class="page-container">
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h2 mb-1">
                    <i class="fas fa-desktop me-2 text-primary"></i>
                    Bilgisayar YÃ¶netimi
                </h1>
                <p class="text-muted mb-0">Sistem genelindeki bilgisayarlarÄ± yÃ¶netin ve takip edin</p>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-success">
                    <i class="fas fa-download me-1"></i>
                    Excel'e Aktar
                </button>
                <a asp-controller="Computer" asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus me-1"></i>
                    Yeni Bilgisayar
                </a>

            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card" onclick="filterByStatus('all')">
                <div class="stat-content">
                    <div class="stat-icon total">
                        <i class="fas fa-desktop"></i>
                    </div>
                    <div class="stat-details">
                        <h3>245</h3>
                        <p>Toplam Bilgisayar</p>
                    </div>
                </div>
            </div>
            <div class="stat-card" onclick="filterByStatus('active')">
                <div class="stat-content">
                    <div class="stat-icon active">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-details">
                        <h3>198</h3>
                        <p>Aktif KullanÄ±mda</p>
                    </div>
                </div>
            </div>
            <div class="stat-card" onclick="filterByStatus('maintenance')">
                <div class="stat-content">
                    <div class="stat-icon maintenance">
                        <i class="fas fa-tools"></i>
                    </div>
                    <div class="stat-details">
                        <h3>32</h3>
                        <p>BakÄ±mda</p>
                    </div>
                </div>
            </div>
            <div class="stat-card" onclick="filterByStatus('broken')">
                <div class="stat-content">
                    <div class="stat-icon broken">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="stat-details">
                        <h3>15</h3>
                        <p>ArÄ±zalÄ±</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modern Filter Bar -->
        <div class="filter-bar">
            <div class="filter-controls">
                <!-- Search Input -->
                <div class="search-input-group">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" class="form-control search-input" placeholder="Ad, etiket, seri no, marka ara..."
                        id="searchInput">
                    <button type="button" class="clear-search" onclick="clearSearch()" style="display: none;">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <!-- Status Filter -->
                <div class="filter-dropdown">
                    <button class="filter-btn" onclick="toggleDropdown('statusDropdown')">
                        <i class="fas fa-filter"></i>
                        <span>Durum</span>
                        <i class="fas fa-chevron-down"></i>
                    </button>
                    <div class="filter-dropdown-menu" id="statusDropdown">
                        <div class="filter-option" onclick="selectFilter('status', 'all', 'TÃ¼m Durumlar')">
                            <span>TÃ¼m Durumlar</span>
                        </div>
                        <div class="filter-option" onclick="selectFilter('status', 'active', 'Aktif')">
                            <span>Aktif</span>
                        </div>
                        <div class="filter-option" onclick="selectFilter('status', 'maintenance', 'BakÄ±mda')">
                            <span>BakÄ±mda</span>
                        </div>
                        <div class="filter-option" onclick="selectFilter('status', 'broken', 'ArÄ±zalÄ±')">
                            <span>ArÄ±zalÄ±</span>
                        </div>
                    </div>
                </div>

                <!-- Company Filter -->
                <div class="filter-dropdown">
                    <button class="filter-btn" onclick="toggleDropdown('companyDropdown')">
                        <i class="fas fa-building"></i>
                        <span>Firma</span>
                        <i class="fas fa-chevron-down"></i>
                    </button>
                    <div class="filter-dropdown-menu" id="companyDropdown">
                        <div class="filter-option" onclick="selectFilter('company', 'all', 'TÃ¼m Firmalar')">
                            <span>TÃ¼m Firmalar</span>
                        </div>
                        <div class="filter-option" onclick="selectFilter('company', 'tech-corp', 'Tech Corp')">
                            <span>Tech Corp</span>
                        </div>
                        <div class="filter-option" onclick="selectFilter('company', 'software-inc', 'Software Inc')">
                            <span>Software Inc</span>
                        </div>
                        <div class="filter-option"
                            onclick="selectFilter('company', 'digital-solutions', 'Digital Solutions')">
                            <span>Digital Solutions</span>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="quick-actions">
                    <button class="btn btn-outline-secondary btn-sm" onclick="clearAllFilters()">
                        <i class="fas fa-times me-1"></i>
                        Temizle
                    </button>

                    <div class="view-toggle">
                        <button class="active" onclick="setView('grid')">
                            <i class="fas fa-th"></i>
                        </button>
                        <button onclick="setView('list')">
                            <i class="fas fa-list"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Active Filters -->
            <div class="active-filters" id="activeFilters" style="display: none;">
                <span class="text-muted me-2">Aktif filtreler:</span>
            </div>
        </div>

        <!-- Results Info -->
        <div class="results-header">
            <div class="results-info">
                <strong>245</strong> bilgisayar bulundu
                <span id="searchResultText" style="display: none;"></span>
            </div>
            <div class="text-muted small">
                <i class="fas fa-sync-alt me-1"></i>
                Son gÃ¼ncelleme: 2 dakika Ã¶nce
            </div>
        </div>

        <!-- Sample Results Table (Simplified for demo) -->
        <div class="card">
            <div class="table-responsive">
                <table class="table table-vcenter mb-0">
                    <thead class="table-light">
                        <tr>
                            <th width="40">
                                <input class="form-check-input" type="checkbox">
                            </th>
                            <th>Bilgisayar</th>
                            <th>Firma</th>
                            <th>Atanan ÃalÄ±Åan</th>
                            <th>Durum</th>
                            <th>DonanÄ±m</th>
                            <th>Garanti</th>
                            <th width="100">Ä°Ålemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <input class="form-check-input" type="checkbox">
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="avatar avatar-sm me-3 bg-primary text-white">
                                        <i class="fas fa-desktop"></i>
                                    </div>
                                    <div>
                                        <div class="fw-bold">PC-001</div>
                                        <small class="text-muted">Dell OptiPlex 7090</small>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-blue-lt">Tech Corp</span>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="avatar avatar-xs me-2 bg-success text-white">A</div>
                                    <span>Ahmet YÄ±lmaz</span>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-success">Aktif</span>
                            </td>
                            <td>
                                <div class="text-sm">
                                    <div><strong>CPU:</strong> Intel i7</div>
                                    <div><strong>RAM:</strong> 16 GB DDR4</div>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-success">128 gÃ¼n</span>
                                <br>
                                <small class="text-muted">15.12.2025</small>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-warning">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        <!-- More rows would go here in real implementation -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Toast Container -->
        <div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global state
        let activeFilters = {
            status: 'all',
            company: 'all',
            search: ''
        };

        let currentView = 'grid';

        // Initialize
        document.addEventListener('DOMContentLoaded', function () {
            initializeSearch();
            updateFilterDisplay();
        });

        // Search functionality
        function initializeSearch() {
            const searchInput = document.getElementById('searchInput');
            const clearButton = searchInput.parentElement.querySelector('.clear-search');

            let debounceTimer;

            searchInput.addEventListener('input', function () {
                const value = this.value.trim();

                // Show/hide clear button
                clearButton.style.display = value ? 'block' : 'none';

                // Debounced search
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => {
                    activeFilters.search = value;
                    updateResults();
                    updateFilterDisplay();
                }, 300);
            });

            searchInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    updateResults();
                }
            });
        }

        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            searchInput.value = '';
            searchInput.focus();
            activeFilters.search = '';
            updateResults();
            updateFilterDisplay();
            document.querySelector('.clear-search').style.display = 'none';
        }

        // Dropdown functionality
        function toggleDropdown(dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            const isVisible = dropdown.classList.contains('show');

            // Close all dropdowns
            document.querySelectorAll('.filter-dropdown-menu').forEach(menu => {
                menu.classList.remove('show');
            });

            // Toggle current dropdown
            if (!isVisible) {
                dropdown.classList.add('show');
                dropdown.classList.add('fade-in');
            }
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function (e) {
            if (!e.target.closest('.filter-dropdown')) {
                document.querySelectorAll('.filter-dropdown-menu').forEach(menu => {
                    menu.classList.remove('show');
                });
            }
        });

        // Filter selection
        function selectFilter(type, value, displayName) {
            activeFilters[type] = value;
            updateResults();
            updateFilterDisplay();

            // Close dropdown
            document.querySelectorAll('.filter-dropdown-menu').forEach(menu => {
                menu.classList.remove('show');
            });

            // Update button text
            const button = document.querySelector(`#${type}Dropdown`).previousElementSibling;
            const span = button.querySelector('span');
            if (value === 'all') {
                span.textContent = type === 'status' ? 'Durum' : 'Firma';
                button.classList.remove('has-filters');
            } else {
                span.textContent = displayName;
                button.classList.add('has-filters');
            }

            showToast('success', `${displayName} filtresi uygulandÄ±`, 2000);
        }

        // Filter by status from stats cards
        function filterByStatus(status) {
            // Remove active class from all cards
            document.querySelectorAll('.stat-card').forEach(card => {
                card.classList.remove('active');
            });

            // Add active class to clicked card
            event.currentTarget.classList.add('active');

            activeFilters.status = status;
            updateResults();
            updateFilterDisplay();

            // Update status dropdown button
            const statusButton = document.querySelector('#statusDropdown').previousElementSibling;
            const span = statusButton.querySelector('span');

            const statusNames = {
                'all': 'Durum',
                'active': 'Aktif',
                'maintenance': 'BakÄ±mda',
                'broken': 'ArÄ±zalÄ±'
            };

            span.textContent = statusNames[status];

            if (status === 'all') {
                statusButton.classList.remove('has-filters');
            } else {
                statusButton.classList.add('has-filters');
            }

            showToast('info', `${statusNames[status]} bilgisayarlar gÃ¶steriliyor`, 2000);
        }

        // Clear all filters
        function clearAllFilters() {
            activeFilters = {
                status: 'all',
                company: 'all',
                search: ''
            };

            // Clear search input
            document.getElementById('searchInput').value = '';
            document.querySelector('.clear-search').style.display = 'none';

            // Reset buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('has-filters');
                const span = btn.querySelector('span');
                if (span.textContent !== 'Durum' && span.textContent !== 'Firma') {
                    span.textContent = btn.closest('.filter-dropdown').querySelector('#statusDropdown') ? 'Durum' : 'Firma';
                }
            });

            // Remove active class from stat cards
            document.querySelectorAll('.stat-card').forEach(card => {
                card.classList.remove('active');
            });

            updateResults();
            updateFilterDisplay();
            showToast('info', 'TÃ¼m filtreler temizlendi', 2000);
        }

        // Update filter display
        function updateFilterDisplay() {
            const activeFiltersContainer = document.getElementById('activeFilters');
            const hasActiveFilters = activeFilters.status !== 'all' ||
                activeFilters.company !== 'all' ||
                activeFilters.search !== '';

            if (hasActiveFilters) {
                activeFiltersContainer.style.display = 'flex';

                // Clear existing badges
                const existingBadges = activeFiltersContainer.querySelectorAll('.filter-badge');
                existingBadges.forEach(badge => badge.remove());

                // Add filter badges
                if (activeFilters.search) {
                    addFilterBadge(`Arama: "${activeFilters.search}"`, 'search');
                }

                if (activeFilters.status !== 'all') {
                    const statusNames = {
                        'active': 'Aktif',
                        'maintenance': 'BakÄ±mda',
                        'broken': 'ArÄ±zalÄ±'
                    };
                    addFilterBadge(`Durum: ${statusNames[activeFilters.status]}`, 'status');
                }

                if (activeFilters.company !== 'all') {
                    const companyNames = {
                        'tech-corp': 'Tech Corp',
                        'software-inc': 'Software Inc',
                        'digital-solutions': 'Digital Solutions'
                    };
                    addFilterBadge(`Firma: ${companyNames[activeFilters.company]}`, 'company');
                }
            } else {
                activeFiltersContainer.style.display = 'none';
            }

            // Update search result text
            const searchResultText = document.getElementById('searchResultText');
            if (activeFilters.search) {
                searchResultText.textContent = ` - "${activeFilters.search}" aramasÄ± iÃ§in`;
                searchResultText.style.display = 'inline';
            } else {
                searchResultText.style.display = 'none';
            }
        }

        function addFilterBadge(text, type) {
            const activeFiltersContainer = document.getElementById('activeFilters');
            const badge = document.createElement('span');
            badge.className = 'filter-badge';
            badge.innerHTML = `
                ${text}
                <i class="fas fa-times remove" onclick="removeFilter('${type}')"></i>
            `;
            activeFiltersContainer.appendChild(badge);
        }

        function removeFilter(type) {
            if (type === 'search') {
                clearSearch();
            } else {
                selectFilter(type, 'all', type === 'status' ? 'Durum' : 'Firma');
            }
        }

        // View toggle
        function setView(view) {
            currentView = view;

            // Update button states
            document.querySelectorAll('.view-toggle button').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');

            // Here you would update the table/grid view
            showToast('info', `${view === 'grid' ? 'Kart' : 'Liste'} gÃ¶rÃ¼nÃ¼mÃ¼ aktif`, 1500);
        }

        // Update results (simulated)
        function updateResults() {
            // Simulate loading
            const table = document.querySelector('.table-responsive');
            table.style.opacity = '0.6';

            setTimeout(() => {
                table.style.opacity = '1';

                // Update results count (simulated)
                let count = 245;
                if (activeFilters.status === 'active') count = 198;
                else if (activeFilters.status === 'maintenance') count = 32;
                else if (activeFilters.status === 'broken') count = 15;

                if (activeFilters.search) {
                    count = Math.floor(count * 0.3); // Simulate search results
                }

                if (activeFilters.company !== 'all') {
                    count = Math.floor(count * 0.4); // Simulate company filter
                }

                document.querySelector('.results-info strong').textContent = count;
            }, 300);
        }

        // Toast notifications
        function showToast(type, message, duration = 3000) {
            const toastContainer = document.getElementById('toastContainer');
            const toastId = 'toast-' + Date.now();

            const toastColors = {
                success: 'bg-success',
                error: 'bg-danger',
                warning: 'bg-warning',
                info: 'bg-info'
            };

            const toastIcons = {
                success: 'fa-check-circle',
                error: 'fa-exclamation-circle',
                warning: 'fa-exclamation-triangle',
                info: 'fa-info-circle'
            };

            const toastHtml = `
                <div class="toast align-items-center text-white ${toastColors[type]} border-0" 
                     role="alert" aria-live="assertive" aria-atomic="true" id="${toastId}">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="fas ${toastIcons[type]} me-2"></i>
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                                data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);

            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                autohide: true,
                delay: duration
            });

            toast.show();

            // Remove element after hide
            toastElement.addEventListener('hidden.bs.toast', function () {
                this.remove();
            });
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function (e) {
            // Ctrl/Cmd + K: Focus search
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                document.getElementById('searchInput').focus();
            }

            // Escape: Clear search or close dropdowns
            if (e.key === 'Escape') {
                const searchInput = document.getElementById('searchInput');
                if (searchInput.value) {
                    clearSearch();
                } else {
                    document.querySelectorAll('.filter-dropdown-menu').forEach(menu => {
                        menu.classList.remove('show');
                    });
                }
            }

            // Ctrl/Cmd + Shift + C: Clear all filters
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'C') {
                e.preventDefault();
                clearAllFilters();
            }
        });

        // Auto-refresh simulation
        setInterval(function () {
            // Update "last updated" time
            const now = new Date();
            const minutes = Math.floor(Math.random() * 10) + 1;
            document.querySelector('.results-header .text-muted').innerHTML = `
                <i class="fas fa-sync-alt me-1"></i>
                Son gÃ¼ncelleme: ${minutes} dakika Ã¶nce
            `;
        }, 60000); // Update every minute

        // Smooth animations
        function addSmoothTransition(element) {
            element.style.transition = 'all 0.3s ease-in-out';
        }

        // Initialize smooth transitions for interactive elements
        document.querySelectorAll('.stat-card, .filter-btn, .btn').forEach(addSmoothTransition);

        // Advanced search suggestions (could be implemented)
        function initializeSearchSuggestions() {
            const searchInput = document.getElementById('searchInput');
            const suggestions = [
                'Dell OptiPlex',
                'HP EliteDesk',
                'Lenovo ThinkCentre',
                'Intel i7',
                'AMD Ryzen',
                'Windows 11',
                'SSD 512GB'
            ];

            // This would implement autocomplete functionality
            // For now, just add placeholder hints
            let currentSuggestion = 0;

            searchInput.addEventListener('focus', function () {
                if (!this.value) {
                    this.placeholder = `Ãrn: ${suggestions[currentSuggestion]}`;
                    currentSuggestion = (currentSuggestion + 1) % suggestions.length;
                }
            });
        }

        // Initialize search suggestions
        initializeSearchSuggestions();

        // Performance optimization for large datasets
        function optimizeForLargeData() {
            // Implement virtual scrolling or pagination
            // This would be necessary for datasets > 1000 rows
            console.log('Large dataset optimization ready');
        }

        // URL state management
        function updateURLState() {
            const params = new URLSearchParams();

            if (activeFilters.search) params.set('search', activeFilters.search);
            if (activeFilters.status !== 'all') params.set('status', activeFilters.status);
            if (activeFilters.company !== 'all') params.set('company', activeFilters.company);
            if (currentView !== 'grid') params.set('view', currentView);

            const newURL = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
            window.history.replaceState({}, '', newURL);
        }

        // Load state from URL on page load
        function loadStateFromURL() {
            const params = new URLSearchParams(window.location.search);

            if (params.get('search')) {
                activeFilters.search = params.get('search');
                document.getElementById('searchInput').value = activeFilters.search;
            }

            if (params.get('status')) {
                activeFilters.status = params.get('status');
            }

            if (params.get('company')) {
                activeFilters.company = params.get('company');
            }

            if (params.get('view')) {
                currentView = params.get('view');
                setView(currentView);
            }

            updateFilterDisplay();
            updateResults();
        }

        // Initialize URL state management
        loadStateFromURL();

        // Update URL on filter changes
        const originalSelectFilter = selectFilter;
        selectFilter = function (type, value, displayName) {
            originalSelectFilter(type, value, displayName);
            updateURLState();
        };

        const originalClearAllFilters = clearAllFilters;
        clearAllFilters = function () {
            originalClearAllFilters();
            updateURLState();
        };
    </script>
</body>

</html>